#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

# turn off macOS gatekeeper so cask apps can be opened.
sudo spctl --master-disable

# show hidden files in terminal
defaults write com.apple.finder AppleShowAllFiles YES; killall Finder

# disable siri
defaults write com.apple.Siri StatusMenuVisible -bool false
defaults write com.apple.Siri UserHasDeclinedEnable -bool true
defaults write com.apple.assistant.support 'Assistant Enabled' 0
sudo killall -HUP cfprefsd
sudo killall SystemUIServer

# only show running apps in the dock
defaults write com.apple.dock static-only -bool true; killall Dock

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"
tap "universal-ctags/universal-ctags"
tap "caskroom/cask"

# Unix
brew "git"
brew "zsh"
brew "rsync"
brew "zsh-syntax-highlighting"

# GitHub
cask "github"

# Programming language prerequisites and package managers
brew "yarn"
cask "gpg-suite"

brew "tldr"
cask "visual-studio-code"
cask "shiftit"
cask "hyper"
cask "vivaldi"
cask "firefox"
cask "spotify"
cask "polymail"
cask "transmit"
cask "keka"

EOF

# install vscode extensions
code --install-extension ms-vscode.atom-keybindings --force
code --install-extension formulahendry.auto-close-tag --force
code --install-extension formulahendry.auto-rename-tag --force
code --install-extension sldobri.bunker --force
code --install-extension Heron.firefox-devtools-theme --force
code --install-extension waderyan.gitblame --force
code --install-extension tommasov.hosts --force
code --install-extension emilast.LogFileHighlighter --force
code --install-extension PKief.material-icon-theme --force
code --install-extension leizongmin.node-module-intellisense --force
code --install-extension esbenp.prettier-vscode --force
code --install-extension burkeholland.simple-react-snippets --force
code --install-extension LudvigLundgren.StockholmTheme --force
code --install-extension ChakrounAnas.turbo-console-log --force
code --install-extension mrmlnc.vscode-apache --force
code --install-extension NuclleaR.vscode-extension-auto-import --force
code --install-extension nickytonline.vscode-gatsby-snippets --force
code --install-extension wix.vscode-import-cost --force
code --install-extension akamud.vscode-javascript-snippet-pack --force
code --install-extension mgmcdermott.vscode-language-babel --force
code --install-extension davidbabel.vscode-simpler-icons --force
code --install-extension jpoissonnier.vscode-styled-components --force
code --install-extension lXSPandora.vscode-styled-components-snippets --force
code --install-extension fabiospampinato.vscode-todo-plus --force

# add vscode settings
vscode_settings=https://raw.githubusercontent.com/TylerBarnes/laptop/master/vscode/settings.json
vscode_settings_folder='/Users/newuser/Library/Application Support/Code/User/'
(cd $vscode_settings_folder && curl -O $vscode_settings)

# install Hasklig font for vscode
cd ~/Library/Fonts && { curl -OLJ 'https://github.com/i-tu/Hasklig/releases/download/1.1/Hasklig-1.1.zip'; unzip Hasklig-1.1.zip; rm Hasklig-1.1.zip; cd -; }

fancy_echo "Configuring zsh syntax highlighting ..."
if [ ! -d "${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting" ]; then
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
  append_to_zshrc "plugins=(git zsh-syntax-highlighting)" 1
fi

fancy_echo "Configuring wpcli ..."
if [ ! -d "/usr/local/bin/wp" ]; then
  curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
  chmod +x wp-cli.phar
  sudo mv wp-cli.phar /usr/local/bin/wp
fi

if ! type "mysqldump" > /dev/null; then  
  echo '# Add MAMP bin directory into $PATH' >> ~/.zshrc
  echo 'PATH="/Applications/MAMP/Library/bin:$PATH"' >> ~/.zshrc
  echo 'PHP_VERSION=$(ls /Applications/MAMP/bin/php/ | sort -n | tail -1)' >> ~/.zshrc
  echo 'export PATH=/Applications/MAMP/bin/php/${PHP_VERSION}/bin:$PATH' >> ~/.zshrc
fi

# npm packages
npm install -g eslint

fancy_echo "Configuring asdf version manager ..."
if [ ! -d "$HOME/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.5.0
  append_to_zshrc "source $HOME/.asdf/asdf.sh" 1
  append_to_zshrc "$HOME/.asdf/completions/asdf.bash" 1
  chmod +x "$HOME/.asdf"
  chmod +x "$HOME/.asdf/completions/asdf.bash"
fi

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

# shellcheck disable=SC1090
source "$HOME/.asdf/asdf.sh"
add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

fancy_echo "Installing latest Ruby ..."
install_asdf_language "ruby"
gem update --system
gem_install_or_update "bundler"
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing latest Node ..."
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs"

gem install wordmove

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi
